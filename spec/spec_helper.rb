def test_data
  @customer_1 = Customer.create!(first_name: 'Joey', last_name: 'Smith', email: 'joey@joey.com', address: '123 Main St Denver,CO 80218')
  @customer_2 = Customer.create!(first_name: 'Cecilia', last_name: 'Jones', email: 'cecilia@aol.com', address: '456 1st St Denver,CO 80218')
  @customer_3 = Customer.create!(first_name: 'Maria', last_name: 'Simpson', email: 'maria@hotmail.com', address: '789 2nd St Denver,CO 80218')
  @customer_4 = Customer.create!(first_name: 'James', last_name: 'Bond', email: 'james@yahoo.com', address: '1011 3rd St Denver,CO 80218')

  @subscription_1 = Subscription.create!(title: 'Weekly', price: 10.00, status: "active", frequency: "weekly", customer_id: @customer_1.id, tea_id: @tea_1.id)
  @subscription_2 = Subscription.create!(title: 'Monthly', price: 30.00, status: "active", frequency: "monthly", customer_id: @customer_2.id, tea_id: @tea_2.id)
  @subscription_3 = Subscription.create!(title: 'Bi-Weekly', price: 20.00, status: "active", frequency: "bi-weekly", customer_id: @customer_3.id, tea_id: @tea_3.id)
  @subscription_4 = Subscription.create!(title: 'Bi-monthly', price: 40.00, status: "active", frequency: "bi-monthly", customer_id: @customer_4.id, tea_id: @tea_4.id)
  @subscription_5 = Subscription.create!(title: 'Monthly', price: 50.00, status: "canceled", frequency: "monthly", customer_id: @customer_1.id, tea_id: @tea_5.id)

  @tea_1 = Tea.create!(title: 'Green', description: 'Green Tea', temperature: "210", brew_time: "4-6 minutes")
  @tea_2 = Tea.create!(title: 'Black', description: 'Black Tea', temperature: "210", brew_time: "5-7 minutes")
  @tea_3 = Tea.create!(title: 'Oolong', description: 'Oolong Tea', temperature: "200", brew_time: "5-7 minutes")
  @tea_4 = Tea.create!(title: 'White', description: 'White Tea', temperature: "200", brew_time: "8-12 minutes")
  @tea_5 = Tea.create!(title: 'Herbal', description: 'Herbal Tea', temperature: "190", brew_time: "5-7 minutes")
  @tea_6 = Tea.create!(title: 'Chai', description: 'Chai Tea', temperature: "190", brew_time: "4-6 minutes")
  @tea_7 = Tea.create!(title: 'Matcha', description: 'Matcha Tea', temperature: "180", brew_time: "10-15 minutes")
  @tea_8 = Tea.create!(title: 'Rooibos', description: 'Rooibos Tea', temperature: "180", brew_time: "5-10 minutes")
  @tea_9 = Tea.create!(title: 'Matcha', description: 'Sleepy Tea', temperature: "200", brew_time: "5-10 minutes")
  @tea_10 = Tea.create!(title: 'Matcha', description: 'Throat Soothing Tea', temperature: "250", brew_time: "5-10 minutes")

  @subscription_tea_1 = SubscriptionTea.create!(subscription_id: subscription_1.id, tea_id: tea_1.id)
  @subscription_tea_2 = SubscriptionTea.create!(subscription_id: subscription_1.id, tea_id: tea_2.id)
  @subscription_tea_3 = SubscriptionTea.create!(subscription_id: subscription_2.id, tea_id: tea_3.id)
  @subscription_tea_4 = SubscriptionTea.create!(subscription_id: subscription_2.id, tea_id: tea_4.id)
  @subscription_tea_5 = SubscriptionTea.create!(subscription_id: subscription_2.id, tea_id: tea_5.id)
  @subscription_tea_7 = SubscriptionTea.create!(subscription_id: subscription_3.id, tea_id: tea_7.id)
  @subscription_tea_8 = SubscriptionTea.create!(subscription_id: subscription_3.id, tea_id: tea_8.id)
  @subscription_tea_9 = SubscriptionTea.create!(subscription_id: subscription_4.id, tea_id: tea_9.id)
  @subscription_tea_10 = SubscriptionTea.create!(subscription_id: subscription_4.id, tea_id: tea_10.id)
  @subscription_tea_11 = SubscriptionTea.create!(subscription_id: subscription_5.id, tea_id: tea_1.id)
  @subscription_tea_12 = SubscriptionTea.create!(subscription_id: subscription_5.id, tea_id: tea_2.id)
  @subscription_tea_13 = SubscriptionTea.create!(subscription_id: subscription_5.id, tea_id: tea_3.id)
  @subscription_tea_14 = SubscriptionTea.create!(subscription_id: subscription_5.id, tea_id: tea_4.id)
end
# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end
